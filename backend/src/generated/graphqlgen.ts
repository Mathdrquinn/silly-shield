// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { User, Tournament } from "./prisma-client";
import { Context } from "../types";

type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type UsersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export interface Type {
    users: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name,
    email: (parent: User) => parent.email
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateUser {
    name: string;
    email: string | null;
  }

  export interface ArgsCreateTournament {
    name: string;
    startDate: string;
    playerCountLimit: number | null;
  }

  export type CreateUserResolver = (
    parent: undefined,
    args: ArgsCreateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type CreateTournamentResolver = (
    parent: undefined,
    args: ArgsCreateTournament,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Tournament | null | Promise<Tournament | null>;

  export interface Type {
    createUser: (
      parent: undefined,
      args: ArgsCreateUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    createTournament: (
      parent: undefined,
      args: ArgsCreateTournament,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Tournament | null | Promise<Tournament | null>;
  }
}

export namespace TournamentResolvers {
  export const defaultResolvers = {
    id: (parent: Tournament) => parent.id,
    name: (parent: Tournament) => parent.name,
    startDate: (parent: Tournament) => parent.startDate,
    playerCountLimit: (parent: Tournament) => parent.playerCountLimit
  };

  export interface UserWhereInput {
    AND: UserWhereInput[];
    OR: UserWhereInput[];
    NOT: UserWhereInput[];
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    email: string | null;
    email_not: string | null;
    email_in: string[];
    email_not_in: string[];
    email_lt: string | null;
    email_lte: string | null;
    email_gt: string | null;
    email_gte: string | null;
    email_contains: string | null;
    email_not_contains: string | null;
    email_starts_with: string | null;
    email_not_starts_with: string | null;
    email_ends_with: string | null;
    email_not_ends_with: string | null;
  }

  export interface ArgsPlayers {
    where: UserWhereInput | null;
    orderBy: UserOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type IdResolver = (
    parent: Tournament,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Tournament,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type StartDateResolver = (
    parent: Tournament,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PlayerCountLimitResolver = (
    parent: Tournament,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type PlayersResolver = (
    parent: Tournament,
    args: ArgsPlayers,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export interface Type {
    id: (
      parent: Tournament,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Tournament,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    startDate: (
      parent: Tournament,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    playerCountLimit: (
      parent: Tournament,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    players: (
      parent: Tournament,
      args: ArgsPlayers,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Mutation: MutationResolvers.Type;
  Tournament: TournamentResolvers.Type;
}
